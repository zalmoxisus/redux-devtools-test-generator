exports[`TestGenerator component should be empty when no actions provided 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;" />
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should generate test for the last action when selectedActionId not specified 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;">
    import expect from \'expect\';
    import reducers from \'../../reducers\';
    
    describe(\'reducers\', () => {
      it(\'should handle actions\', () => {
        let state;
        state = reducers({counter:0}, {type:\'INCREMENT_COUNTER\'});
    expect(state).toEqual({counter:1});
      });
    });
    
  </textarea>
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should generate test for vanilla js class 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;">
    import expect from \'expect\';
    import SomeStore from \'../../stores/SomeStore\';
    
    describe(\'SomeStore\', () => {
      it(\'INCREMENT_COUNTER\', () => {
        const store = new SomeStore({counter:0});
        INCREMENT_COUNTER();
    expect(store.counter).toEqual(1);
      });
    });
    
  </textarea>
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should generate test for vanilla js class with string template 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;">
    import expect from \'expect\';
    import SomeStore from \'../../stores/SomeStore\';
    
    describe(\'SomeStore\', () => {
      it(\'INCREMENT_COUNTER\', () => {
        const store = new SomeStore({counter:0});
        INCREMENT_COUNTER();
        expect(store.counter).toEqual(1);
      });
    });
    
  </textarea>
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should match function template's test for first action 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;">
    import expect from \'expect\';
    import reducers from \'../../reducers\';
    
    describe(\'reducers\', () => {
      it(\'should handle actions\', () => {
        let state;
        state = reducers({counter:0}, {type:\'INCREMENT_COUNTER\'});
    expect(state).toEqual({counter:1});
      });
    });
    
  </textarea>
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should match string template's test for first action 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <textarea
    style="padding:10px;width:100%;height:100%;">
    import expect from \'expect\';
    import reducers from \'../../reducers\';
    
    describe(\'reducers\', () => {
      it(\'should handle actions\', () => {
        let state;
        state = reducers({counter:0}, {type:\'INCREMENT_COUNTER\'});
        expect(state).toEqual({counter:1});
      });
    });
    
  </textarea>
  <div
    style="padding:10px;background-color:#247b98;">
    Hold 
    <b>
      SHIFT
    </b>
     key to select more actions.
  </div>
</div>
`;

exports[`TestGenerator component should show warning message when no params provided 1`] = `
<div
  style="display:flex;flex-flow:column nowrap;height:100%;">
  <div
    style="margin:10px;">
    No template for tests specified.
  </div>
</div>
`;
